/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formulario;

import dao.AcessorioDao;
import dao.CelularDao;
import dao.ChipDao;
import dao.EmprestimoDao;
import dao.ImpressaoDao;
import dao.LogDao;
import java.awt.Color;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.swing.JLabel;

import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;

import javax.swing.table.DefaultTableModel;
import modelo.Acessorio;
import modelo.Celular;
import modelo.Chip;
import modelo.Emprestimo;
import modelo.Session;

/**
 *
 * @author Tony
 */
public class FrmEmprestimoConsulta extends javax.swing.JFrame {

    EmprestimoDao emprestimoDao = new EmprestimoDao();
    LogDao logDao = new LogDao();
    DefaultTableModel modeloGrelha;
    ImpressaoDao imprimir;
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

    /**
     * Creates new form FrmEmprestimoConsulta
     */
    public FrmEmprestimoConsulta() {
        initComponents();
        modeloGrelha = (DefaultTableModel) grelhaEmprestimo.getModel();
        carregarGrelha();
        txtPesquisa.requestFocus();
        this.setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        lblTitulo = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        radNome = new javax.swing.JRadioButton();
        radImei = new javax.swing.JRadioButton();
        radLinha = new javax.swing.JRadioButton();
        txtPesquisa = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        grelhaEmprestimo = new javax.swing.JTable();
        btnNovo = new javax.swing.JButton();
        btnAlterar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnDevolver = new javax.swing.JButton();
        ckDevolvidos = new javax.swing.JCheckBox();
        btnReemitir = new javax.swing.JButton();
        radLocalidade = new javax.swing.JRadioButton();
        radPatrimonio = new javax.swing.JRadioButton();
        btnLimpar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ckAtrazados = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        radModelo = new javax.swing.JRadioButton();
        lblQuantidade = new javax.swing.JLabel();
        radData = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(222, 231, 248));

        lblTitulo.setBackground(new java.awt.Color(51, 51, 51));
        lblTitulo.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lblTitulo.setForeground(new java.awt.Color(255, 255, 255));
        lblTitulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitulo.setText("Consulta  de Empréstimos de CELULARES");
        lblTitulo.setToolTipText("");
        lblTitulo.setOpaque(true);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Seleciona Pesquisa:");

        buttonGroup1.add(radNome);
        radNome.setSelected(true);
        radNome.setText("Nome");
        radNome.setOpaque(false);

        buttonGroup1.add(radImei);
        radImei.setText("Imei");
        radImei.setOpaque(false);

        buttonGroup1.add(radLinha);
        radLinha.setText("Nª da Linha ");
        radLinha.setOpaque(false);

        txtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPesquisaActionPerformed(evt);
            }
        });
        txtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPesquisaKeyReleased(evt);
            }
        });

        grelhaEmprestimo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nª", "DATA", "SITUAÇÃO", "MOTIVO", "FUNCIONÁRIO", "FUNÇÃO", "SETOR", "APARELHO", "IMEI", "PATRIMONIO", "Nª TELEFONE", "DADOS", "VOZ", "PROTOCOLO", "DEVOLVER", "POR"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grelhaEmprestimo.setRowHeight(21);
        grelhaEmprestimo.setSelectionBackground(new java.awt.Color(0, 204, 204));
        grelhaEmprestimo.setSelectionForeground(new java.awt.Color(0, 0, 0));
        grelhaEmprestimo.getTableHeader().setReorderingAllowed(false);
        grelhaEmprestimo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grelhaEmprestimoMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(grelhaEmprestimo);
        if (grelhaEmprestimo.getColumnModel().getColumnCount() > 0) {
            grelhaEmprestimo.getColumnModel().getColumn(0).setPreferredWidth(40);
            grelhaEmprestimo.getColumnModel().getColumn(0).setMaxWidth(40);
            grelhaEmprestimo.getColumnModel().getColumn(1).setPreferredWidth(80);
            grelhaEmprestimo.getColumnModel().getColumn(1).setMaxWidth(80);
            grelhaEmprestimo.getColumnModel().getColumn(2).setPreferredWidth(100);
            grelhaEmprestimo.getColumnModel().getColumn(2).setMaxWidth(100);
            grelhaEmprestimo.getColumnModel().getColumn(3).setPreferredWidth(100);
            grelhaEmprestimo.getColumnModel().getColumn(3).setMaxWidth(100);
            grelhaEmprestimo.getColumnModel().getColumn(4).setPreferredWidth(270);
            grelhaEmprestimo.getColumnModel().getColumn(4).setMaxWidth(270);
            grelhaEmprestimo.getColumnModel().getColumn(5).setPreferredWidth(130);
            grelhaEmprestimo.getColumnModel().getColumn(5).setMaxWidth(130);
            grelhaEmprestimo.getColumnModel().getColumn(6).setPreferredWidth(200);
            grelhaEmprestimo.getColumnModel().getColumn(6).setMaxWidth(200);
            grelhaEmprestimo.getColumnModel().getColumn(7).setPreferredWidth(190);
            grelhaEmprestimo.getColumnModel().getColumn(7).setMaxWidth(190);
            grelhaEmprestimo.getColumnModel().getColumn(8).setPreferredWidth(130);
            grelhaEmprestimo.getColumnModel().getColumn(8).setMaxWidth(130);
            grelhaEmprestimo.getColumnModel().getColumn(9).setPreferredWidth(110);
            grelhaEmprestimo.getColumnModel().getColumn(9).setMaxWidth(110);
            grelhaEmprestimo.getColumnModel().getColumn(10).setPreferredWidth(110);
            grelhaEmprestimo.getColumnModel().getColumn(10).setMaxWidth(110);
            grelhaEmprestimo.getColumnModel().getColumn(11).setPreferredWidth(60);
            grelhaEmprestimo.getColumnModel().getColumn(11).setMaxWidth(60);
            grelhaEmprestimo.getColumnModel().getColumn(12).setPreferredWidth(60);
            grelhaEmprestimo.getColumnModel().getColumn(12).setMaxWidth(60);
            grelhaEmprestimo.getColumnModel().getColumn(13).setPreferredWidth(100);
            grelhaEmprestimo.getColumnModel().getColumn(13).setMaxWidth(100);
            grelhaEmprestimo.getColumnModel().getColumn(14).setPreferredWidth(90);
            grelhaEmprestimo.getColumnModel().getColumn(14).setMaxWidth(90);
        }

        btnNovo.setBackground(new java.awt.Color(204, 255, 204));
        btnNovo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/new.png"))); // NOI18N
        btnNovo.setText("NOVO EMPRESTIMO");
        btnNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovoActionPerformed(evt);
            }
        });

        btnAlterar.setBackground(new java.awt.Color(153, 204, 255));
        btnAlterar.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnAlterar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/edit.png"))); // NOI18N
        btnAlterar.setText("Alterar");
        btnAlterar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });

        btnExcluir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/delete.png"))); // NOI18N
        btnExcluir.setText("Excluir Devolvidos");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnDevolver.setBackground(new java.awt.Color(255, 153, 153));
        btnDevolver.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnDevolver.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/devolver.png"))); // NOI18N
        btnDevolver.setText("Devolução de Empréstimo");
        btnDevolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDevolverActionPerformed(evt);
            }
        });

        ckDevolvidos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckDevolvidos.setForeground(new java.awt.Color(153, 0, 0));
        ckDevolvidos.setText("MOSTRA DEVOLVIDOS");
        ckDevolvidos.setOpaque(false);
        ckDevolvidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckDevolvidosActionPerformed(evt);
            }
        });

        btnReemitir.setBackground(new java.awt.Color(255, 204, 153));
        btnReemitir.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        btnReemitir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/impressora.png"))); // NOI18N
        btnReemitir.setText("Reemitir Termo");
        btnReemitir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReemitirActionPerformed(evt);
            }
        });

        buttonGroup1.add(radLocalidade);
        radLocalidade.setText("Localidade ");
        radLocalidade.setOpaque(false);

        buttonGroup1.add(radPatrimonio);
        radPatrimonio.setText("Patrimonio");
        radPatrimonio.setOpaque(false);

        btnLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/clearResultado.png"))); // NOI18N
        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("* PRETO - Emprestados");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 0));
        jLabel3.setText("* VERMELHO - Devolvidos");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 204));
        jLabel4.setText("* AZUL - Devoluções Atrasadas");

        ckAtrazados.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        ckAtrazados.setForeground(new java.awt.Color(0, 0, 153));
        ckAtrazados.setText("ATRASADOS");
        ckAtrazados.setOpaque(false);
        ckAtrazados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ckAtrazadosActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(255, 204, 153));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagem/impressora.png"))); // NOI18N
        jButton1.setText("Imprimir Pesquisa");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(radModelo);
        radModelo.setText("Marca Modelo");
        radModelo.setOpaque(false);

        lblQuantidade.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        lblQuantidade.setForeground(new java.awt.Color(102, 0, 0));
        lblQuantidade.setText("0 - Empréstimo localizados");

        buttonGroup1.add(radData);
        radData.setText("Data Empréstimo");
        radData.setOpaque(false);
        radData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblTitulo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(radNome)
                        .addGap(18, 18, 18)
                        .addComponent(radImei)
                        .addGap(18, 18, 18)
                        .addComponent(radLocalidade)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radLinha)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radPatrimonio)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(radModelo)
                        .addGap(18, 18, 18)
                        .addComponent(radData)
                        .addGap(7, 7, 7)
                        .addComponent(ckDevolvidos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ckAtrazados)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnExcluir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(lblQuantidade, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNovo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAlterar, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnReemitir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDevolver, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(lblTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel1)
                    .addComponent(radNome)
                    .addComponent(radImei)
                    .addComponent(radLocalidade)
                    .addComponent(radLinha)
                    .addComponent(ckDevolvidos)
                    .addComponent(txtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radPatrimonio)
                    .addComponent(btnLimpar)
                    .addComponent(ckAtrazados)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radModelo)
                    .addComponent(radData))
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 680, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlterar)
                    .addComponent(btnExcluir)
                    .addComponent(btnReemitir)
                    .addComponent(btnDevolver)
                    .addComponent(btnNovo)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(lblQuantidade))
                .addGap(18, 18, 18))
        );

        lblQuantidade.getAccessibleContext().setAccessibleName("0 - Empréstimo localizados.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovoActionPerformed
        // TODO add your handling code here:
        FrmEmprestimo frm = new FrmEmprestimo(this, false);
        frm.novo = true;
        frm.setVisible(true);

    }//GEN-LAST:event_btnNovoActionPerformed

    private String patrimonioComPonto(String patrimonio) {

        String novoPatrimonio = "";
        try {
            if (!patrimonio.equals("") && patrimonio.length() == 12 && !patrimonio.isEmpty()) {
                novoPatrimonio = patrimonio.substring(0, 3) + "." + patrimonio.substring(3, 6) + "." + patrimonio.substring(6, 9) + "." + patrimonio.substring(9, 12);
            }

        } catch (Exception e) {
        }

        return novoPatrimonio;

    }

    // CARREGA GRELHA CONFORME PESQUISA ////////////////////////////////////////
    private void carregarGrelha() {
        // pesquisa somente emprestados
        String soEmprestados = "", tipoPesquisa;

        if (radNome.isSelected()) {
            tipoPesquisa = "nome";
        } else if (radImei.isSelected()) {
            tipoPesquisa = "imei";
        } else if (radLocalidade.isSelected()) {
            tipoPesquisa = "nomeLocalidade";
        } else if (radPatrimonio.isSelected()) {
            tipoPesquisa = "patrimonio";
        } else if (radModelo.isSelected()) {
            tipoPesquisa = "modelo";
        } else if (radData.isSelected()) {
            tipoPesquisa = "dataEmprestimo";
        } else {
            tipoPesquisa = "linha";
        }

        if (!ckDevolvidos.isSelected()) {
            soEmprestados = "EMPRESTADO";
        }

        if (ckAtrazados.isSelected()) {

        }

        ArrayList<Emprestimo> lista = emprestimoDao.getListagemLike(txtPesquisa.getText(), soEmprestados, tipoPesquisa);
        modeloGrelha.setNumRows(0);

        //System.out.println(lista.size());
        lista.forEach((emprestimo) -> {

            String dados;
            String voz;
            String patrimonioCorrigido = "";

            if (emprestimo.getChip().isIsDado()) {
                dados = "Sim";
            } else {
                dados = "---";
            }
            if (emprestimo.getChip().isIsTelefonia()) {
                voz = "Sim";
            } else {
                voz = "---";
            }

            if (emprestimo.getCelular().getPatrimonio() != null) {
                patrimonioCorrigido = patrimonioComPonto(emprestimo.getCelular().getPatrimonio());
            }

            modeloGrelha.addRow(new Object[]{
                emprestimo.getIdEmprestimo(),
                emprestimo.getDataEmprestimo(),
                emprestimo.getSituacao(),
                emprestimo.getMotivoEmprestimo().getMotivoEmprestimo(),
                emprestimo.getFuncionario().getNome(),
                emprestimo.getFuncionario().getCargo().getNomeCargo(),
                emprestimo.getFuncionario().getLocalidade().getNomeLocalidade(),
                emprestimo.getCelular().getMarca().getMarca(),
                emprestimo.getCelular().getImei1(),
                patrimonioCorrigido,
                emprestimo.getChip().getNumeroLinha(),
                dados,
                voz,
                emprestimo.getProtocolo(),
                emprestimo.getDataDevolucao(),
                emprestimo.getUsuario().getNome()
            }
            );

            if (ckAtrazados.isSelected()) {
                mostraApenasAtrazados();
            }

        });
        pinta();
        lblQuantidade.setText(modeloGrelha.getRowCount() + " - Empréstimos localizados.");
    }

    // PINTANDO GRADE 
    private void pinta() {
        grelhaEmprestimo.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                //*******************************************
                int coluna = 2;
                int colunaDevolucao = 14;

                Object procurado = grelhaEmprestimo.getValueAt(row, coluna);

                String dataDevolucao = (String) grelhaEmprestimo.getValueAt(row, colunaDevolucao);

                Date dataDevolucaoDate = null;

                if (procurado.equals("EMPRESTADO")) {
                    label.setForeground(Color.BLACK);
                } else {
                    label.setForeground(Color.RED);
                }

                if (dataDevolucao.replace("/", "").length() >= 8) {
                    try {
                        dataDevolucaoDate = sdf.parse(dataDevolucao);

                        if (dataDevolucaoDate.before(new Date()) && procurado.equals("EMPRESTADO")) {

                            label.setForeground(Color.BLUE);
                        }

                    } catch (ParseException ex) {

                    }

                }

                //*******************************************
                return label;

            }
        });
    }

    //FUNÇÃO MOSTRAR APENAS ATRASADOS //////////////////////////////////////////
    private void mostraApenasAtrazados() {

        for (int i = 0; i < modeloGrelha.getRowCount(); i++) {

            String dataDelucao = (String) grelhaEmprestimo.getValueAt(i, 14);
            String emprestado = (String) grelhaEmprestimo.getValueAt(i, 2);
            Date dataDevolucaoDate = null;

            if (dataDelucao.replace("/", "").length() >= 8) {
                try {
                    dataDevolucaoDate = sdf.parse(dataDelucao);

                    if (dataDevolucaoDate.after(new Date()) && emprestado.equals("EMPRESTADO")) {

                        modeloGrelha.removeRow(i);
                    }

                } catch (ParseException ex) {

                }

            } else {
                modeloGrelha.removeRow(i);
            }

        }
    }


    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlterarActionPerformed
        // TODO add your handling code here:

        if (Session.getPrevilegio().equals("Consulta")) {
            JOptionPane.showMessageDialog(this, "Usuário se permissão para exclusão.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (grelhaEmprestimo.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um Equipamento para Alteração.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        String devolvido = (String) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 2);
        if (devolvido.equalsIgnoreCase("DEVOLVIDO")) {
            JOptionPane.showMessageDialog(null, "Situação DEVOLVIDO não permite alteração.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        int codigo = (int) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 0);
        FrmEmprestimo frm = new FrmEmprestimo(this, false);
        frm.novo = false;
        frm.emprestimo_id = codigo;
        frm.setVisible(true);


    }//GEN-LAST:event_btnAlterarActionPerformed

    private void txtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPesquisaKeyReleased
        // TODO add your handling code here:
        carregarGrelha();
    }//GEN-LAST:event_txtPesquisaKeyReleased

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        // TODO add your handling code here:

        if (Session.getPrevilegio().equals("Consulta")) {
            JOptionPane.showMessageDialog(this, "Usuário se permissão para exclusão.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (grelhaEmprestimo.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um Equipamento para Excluír.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        String devolvido = (String) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 2);
        if (devolvido.equalsIgnoreCase("EMPRESTADO")) {
            JOptionPane.showMessageDialog(null, "Situação EMPRESTADO não pode exclusão.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        int resposta;
        resposta = JOptionPane.showConfirmDialog(null, "Deseja realmente excluir?", "Escolha um", JOptionPane.YES_NO_OPTION);

        if (resposta == JOptionPane.YES_OPTION) {

            int codigo = (int) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 0);
            Emprestimo emprestimo = emprestimoDao.retornaPorID(codigo);
            //DEVOLVE O CHIP
            Chip chip = new Chip(emprestimo.getChip().getIdChip());
            chip.setStatus("Disponível");
            new ChipDao().updateStatus(chip);
            // DEVOLVE O CELULAR
            Celular celular = new Celular(emprestimo.getCelular().getIdCelular());
            celular.setStatus("Disponível");
            new CelularDao().updateStatus(celular);
            // APAGUA O EMPRESTIMO
            new EmprestimoDao().deleteUmItem(emprestimo.getIdEmprestimo());
            JOptionPane.showMessageDialog(null, "Excluído com Sucesso.");
            //log de devolução
            logDao.insert("Excluído Emprestimo, código: " + emprestimo.getIdEmprestimo());
            carregarGrelha();

        } else if (resposta == JOptionPane.NO_OPTION) {
            JOptionPane.showMessageDialog(null, "Operação Cancelada.", null, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnDevolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDevolverActionPerformed
        // TODO add your handling code here:
        if (grelhaEmprestimo.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um Equipamento para Alteração.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        String devolvido = (String) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 2);
        if (devolvido.equalsIgnoreCase("DEVOLVIDO")) {
            JOptionPane.showMessageDialog(null, "Situação DEVOLVIDO não pode devolver.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        int codigo = (int) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 0);
        FrmEmprestimoDevolucao frm = new FrmEmprestimoDevolucao(this, false);
        frm.novo = false;
        frm.emprestimo_id = codigo;
        frm.setVisible(rootPaneCheckingEnabled);
    }//GEN-LAST:event_btnDevolverActionPerformed

    private void ckDevolvidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckDevolvidosActionPerformed
        // TODO add your handling code here:
        if (ckDevolvidos.isSelected()) {
            ckAtrazados.setSelected(false);
        }
        carregarGrelha();
    }//GEN-LAST:event_ckDevolvidosActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        carregarGrelha();
    }//GEN-LAST:event_formWindowActivated

    private void btnReemitirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReemitirActionPerformed
        // TODO add your handling code here:    

        imprimir = new ImpressaoDao();

        if (grelhaEmprestimo.getSelectedRow() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um termo pra Reemitir.", null, JOptionPane.ERROR_MESSAGE);
            return;
        }

        // SE ALINHA´ESTÁ SELECIONADA CONTINUA ///////////////////////////////////
        String listagemACessorios = "";

        new FrmBarraProgresso(null, true).setVisible(true);

        int emprestimo_id = (int) modeloGrelha.getValueAt(grelhaEmprestimo.getSelectedRow(), 0);
        String tipoTermo = (String) modeloGrelha.getValueAt(grelhaEmprestimo.getSelectedRow(), 2);

        Emprestimo emp = emprestimoDao.retornaPorID(emprestimo_id);
        ArrayList<Acessorio> lista = new AcessorioDao().getListagemPorEmprestimo(emprestimo_id);

        // CRIANDO OS DADOS DO TERMO ///////////////////////////////////////////        
        for (Acessorio acessorio : lista) {
            listagemACessorios = listagemACessorios + acessorio.getNomeAcessorio() + ", ";

        }

        if (!listagemACessorios.equalsIgnoreCase("")) {
            listagemACessorios = listagemACessorios.substring(0, listagemACessorios.length() - 2);
            listagemACessorios = listagemACessorios + ".";
        }

        HashMap params = new HashMap<>();
        params.put("acessorios", listagemACessorios);
        // caminho imagem

        // VERIFICANDO DE É DEVOLVIDO OU EMPRESTIMO
        if (tipoTermo.equalsIgnoreCase("EMPRESTADO")) {
            // IMPRIMIR APARELHO E CHIP
            if (emp.getCelular().getIdCelular() > 0 && emp.getChip().getIdChip() > 0) {

                imprimir.imprimirEmprestimoCelularEChip(emprestimo_id, params);
                // APENA O APARELHO    
            } else if (emp.getCelular().getIdCelular() > 0 && emp.getChip().getIdChip() <= 0) {
                imprimir.imprimirEmprestimoCelular(emprestimo_id, params);
                // APENA O CHIP   
            } else if (emp.getCelular().getIdCelular() <= 0 && emp.getChip().getIdChip() > 0) {
                imprimir.imprimirEmprestimoChip(emprestimo_id);

            }
            
        } else {
            params.put("observacao", emp.getObservacaoDevolucao());
            imprimir.imprimirTermoDevolucao(emprestimo_id, params);
        }
        logDao.insert("Reemitir termo:" + emp.getIdEmprestimo() + " do funcionário: " + emp.getFuncionario().getNome());
        params.clear();


    }//GEN-LAST:event_btnReemitirActionPerformed

    private void grelhaEmprestimoMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grelhaEmprestimoMouseReleased
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {

            if (grelhaEmprestimo.getSelectedRow() < 0) {
                JOptionPane.showMessageDialog(null, "Selecione um Equipamento para Alteração.", null, JOptionPane.ERROR_MESSAGE);
                return;
            }

            //String devolvido = (String) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 2);
            int codigo = (int) grelhaEmprestimo.getValueAt(grelhaEmprestimo.getSelectedRow(), 0);
            FrmEmprestimo frm = new FrmEmprestimo(this, false);
            frm.novo = false;
            frm.visualizar = true;
            frm.emprestimo_id = codigo;
            frm.setVisible(true);

        }
    }//GEN-LAST:event_grelhaEmprestimoMouseReleased

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        // TODO add your handling code here:
        txtPesquisa.setText("");
        ckAtrazados.setSelected(false);
        ckDevolvidos.setSelected(false);
        carregarGrelha();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void ckAtrazadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ckAtrazadosActionPerformed
        // TODO add your handling code here:
        if (ckAtrazados.isSelected()) {
            ckDevolvidos.setSelected(false);
        }
        carregarGrelha();
    }//GEN-LAST:event_ckAtrazadosActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new FrmBarraProgresso(this, true).setVisible(true);
        new ImpressaoDao().imprimirEmprestados();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPesquisaActionPerformed

    private void radDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radDataActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmEmprestimoConsulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmEmprestimoConsulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlterar;
    private javax.swing.JButton btnDevolver;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnNovo;
    private javax.swing.JButton btnReemitir;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox ckAtrazados;
    private javax.swing.JCheckBox ckDevolvidos;
    private javax.swing.JTable grelhaEmprestimo;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblQuantidade;
    private javax.swing.JLabel lblTitulo;
    private javax.swing.JRadioButton radData;
    private javax.swing.JRadioButton radImei;
    private javax.swing.JRadioButton radLinha;
    private javax.swing.JRadioButton radLocalidade;
    private javax.swing.JRadioButton radModelo;
    private javax.swing.JRadioButton radNome;
    private javax.swing.JRadioButton radPatrimonio;
    private javax.swing.JTextField txtPesquisa;
    // End of variables declaration//GEN-END:variables
}
